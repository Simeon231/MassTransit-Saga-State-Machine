@using MassTransit
@using MasterDegreeDemo.EventReceiver1.Consumers
@using MasterDegreeDemo.EventReceiver2.Consumers
@using MasterDegreeDemo.ServiceDefaults

@page "/payment"

@implements IDisposable

@inject IPublishEndpoint PublishEndpoint

@rendermode InteractiveServer

<PageTitle>Payment</PageTitle>

<div class="container d-flex gap-2">
    <h1>Payment</h1>
    @if (orderReserved is null)
    {
        <h3>Nothing received</h3>
    }
    else
    {
        <h3>@orderReserved.ProductName product received</h3>
        <button @onclick="PayOrder">Pay</button>
        <button @onclick="DeclineOrder">Decline</button>
    }
</div>

@code {
    private OrderReserved? orderReserved;

    protected override void OnInitialized()
    {
        OrderReservedConsumer.OnReceived += ReceiveEvent;
    }

    public void Dispose()
    {
        OrderReservedConsumer.OnReceived -= ReceiveEvent;
    }

    private void ReceiveEvent(OrderReserved orderReserved)
    {
        this.orderReserved = orderReserved;

        base.StateHasChanged();
    }

    private void PayOrder()
    {
        if (orderReserved is null)
        {
            return;
        }

        PublishEndpoint.Publish(new OrderPaymentSucceded
        {
            Id = orderReserved.Id,
            ProductName = orderReserved.ProductName,
        });

        orderReserved = null;
    }

    private void DeclineOrder()
    {
        if (orderReserved is null)
        {
            return;
        }

        PublishEndpoint.Publish(new OrderPaymentFailed
        {
            Id = orderReserved.Id,
            ProductName = orderReserved.ProductName,
        });
        orderReserved = null;
    }
}
