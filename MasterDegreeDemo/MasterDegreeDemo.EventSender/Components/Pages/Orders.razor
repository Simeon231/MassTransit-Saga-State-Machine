@using BlazorBootstrap
@using MassTransit
@using MasterDegreeDemo.EventSender.Sagas
@using MasterDegreeDemo.ServiceDefaults

@page "/"

@rendermode InteractiveServer

@inject IPublishEndpoint PublishEndpoint
@inject ILogger<Orders> Logger

@implements IDisposable

<PageTitle>Orders</PageTitle>

<div class="container d-flex flex-column gap-2">
    <h1>Orders</h1>
    <InputText @bind-Value="productName" DisplayName="Product"/>
    <button @onclick="PublishEvent" class="btn btn-primary">Publish</button>

    <Grid @ref="grid" TItem="OrderSaga" Class="table table-hover table-bordered table-striped"
    Data="OrderStateMachine.Sagas.Values" Responsive="true">
        <GridColumns>
            <GridColumn TItem="OrderSaga" HeaderText="Id" PropertyName="Id">
                @context.Id
            </GridColumn>
            <GridColumn TItem="OrderSaga" HeaderText="Product" PropertyName="ProductName">
                @context.ProductName
            </GridColumn>
            <GridColumn TItem="OrderSaga" HeaderText="State" PropertyName="State">
                @context.State
            </GridColumn>
        </GridColumns>
    </Grid>
</div>

@code {
    private Grid<OrderSaga> grid = default!;

    private string? productName;

    public void Dispose()
    {
        OrderStateMachine.OnReceive -= RefreshData;
    }

    protected override void OnInitialized()
    {
        OrderStateMachine.OnReceive += RefreshData;
    }

    private async void RefreshData()
    {
        await grid.RefreshDataAsync();
    }

    private async Task PublishEvent()
    {
        if (productName is null)
        {
            return;
        }

        var orderId = Guid.NewGuid();

        Logger.LogInformation("Publishing an order with id {Id}", orderId);

        await PublishEndpoint.Publish<SubmitOrder>(new SubmitOrder(new Order(orderId, productName)));

        productName = null;
    }
}
